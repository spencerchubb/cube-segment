{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["const width = 320;\r\nconst height = 320;\r\n\r\ntype OnFacelets = (facelets: Uint8Array) => void;\r\n\r\nexport function getVideo(onFacelets: OnFacelets) {\r\n    console.log(\"Getting video\");\r\n    navigator.mediaDevices.getUserMedia({\r\n        video: {\r\n            width: width,\r\n            height: height,\r\n        },\r\n    }).then(stream => {\r\n        console.log(\"Streaming video\");\r\n        const video = document.getElementById(\"video\") as HTMLVideoElement;\r\n        video.srcObject = stream;\r\n        video.onloadedmetadata = function (e) {\r\n            video.play();\r\n        };\r\n\r\n        // get pixels\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = 320;\r\n        canvas.height = 320;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        let time;\r\n        function loop() {\r\n            requestAnimationFrame(newTime => {\r\n                if (!time) time = newTime;\r\n                const elapsed = newTime - time;\r\n                if (elapsed >= 1000) {\r\n                    time = newTime;\r\n                    ctx.drawImage(video, 0, 0, width, height);\r\n                    const imageData = ctx.getImageData(0, 0, width, height);\r\n                    const pixels = imageData.data;\r\n                    console.log(pixels);\r\n                    const facelets = getFacelets(pixels);\r\n                    onFacelets(facelets);\r\n                    return;\r\n                }\r\n                loop();\r\n            });\r\n        }\r\n        loop();\r\n    }).catch(err => console.log(err));\r\n}\r\n\r\nfunction getFacelets(pixels: Uint8ClampedArray) {\r\n    // The pixels array will be of length width * height * 4\r\n    // It will contain the RGBA values for each pixel, hence the 4.\r\n\r\n    const ninths = new Array(3);\r\n    for (let i = 0; i < 3; i++) {\r\n        ninths[i] = new Array(3);\r\n        for (let j = 0; j < 3; j++) {\r\n            // Multiply by 3 because we only want the RGB values\r\n            ninths[i][j] = new Uint8ClampedArray(width * height * 3 / 9 + 1);\r\n        }\r\n    }\r\n\r\n    const indices = new Array(3);\r\n    for (let i = 0; i < 3; i++) {\r\n        indices[i] = new Array(3);\r\n        for (let j = 0; j < 3; j++) {\r\n            indices[i][j] = 0;\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < width * height; i++) {\r\n        const i4 = i * 4;\r\n        const r = pixels[i4];\r\n        const g = pixels[i4 + 1];\r\n        const b = pixels[i4 + 2];\r\n\r\n        // Determine which 1/9th of the image this pixel is in\r\n        const x = i % width;\r\n        const y = Math.floor(i / width);\r\n        const x9 = Math.floor(x / (width / 3));\r\n        const y9 = Math.floor(y / (height / 3));\r\n        // console.log({ i, x, y, x9, y9 });\r\n\r\n        // Add the pixel to the appropriate array\r\n        const index = indices[x9][y9];\r\n        const index3 = index * 3;\r\n        ninths[x9][y9][index3] = r;\r\n        ninths[x9][y9][index3 + 1] = g;\r\n        ninths[x9][y9][index3 + 2] = b;\r\n        indices[x9][y9]++;\r\n    }\r\n\r\n    // 9 * 3 because there are 9 facelets per face, and each facelet has 3 values (RGB)\r\n    const facelets = new Uint8Array(9 * 3);\r\n    for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n            const [r, g, b] = getFacelet(ninths[i][j], indices[i][j]);\r\n            const index = (i * 3 + j) * 3;\r\n            facelets[index] = r;\r\n            facelets[index + 1] = g;\r\n            facelets[index + 2] = b;\r\n        }\r\n    }\r\n    return facelets;\r\n}\r\n\r\nfunction getFacelet(pixels: Uint8ClampedArray, len: number): number[] {\r\n    // let rSorted = new Uint8ClampedArray(len);\r\n    // let gSorted = new Uint8ClampedArray(len);\r\n    // let bSorted = new Uint8ClampedArray(len);\r\n    // for (let i = 0; i < len; i++) {\r\n    //     const i3 = i * 3;\r\n    //     const r = pixels[i3];\r\n    //     const g = pixels[i3 + 1];\r\n    //     const b = pixels[i3 + 2];\r\n    //     rSorted[i] = r;\r\n    //     gSorted[i] = g;\r\n    //     bSorted[i] = b;\r\n    // }\r\n\r\n    // rSorted.sort((a, b) => a - b);\r\n    // gSorted.sort((a, b) => a - b);\r\n    // bSorted.sort((a, b) => a - b);\r\n\r\n    // const start = Math.floor(len / 4);\r\n    // const end = Math.floor(len * 3 / 4);\r\n    // let rTrimmed = rSorted.subarray(start, end);\r\n    // let gTrimmed = gSorted.subarray(start, end);\r\n    // let bTrimmed = bSorted.subarray(start, end);\r\n\r\n    // let rSum = 0;\r\n    // let gSum = 0;\r\n    // let bSum = 0;\r\n\r\n    // for (let i = 0; i < rTrimmed.length; i++) {\r\n    //     rSum += rTrimmed[i];\r\n    //     gSum += gTrimmed[i];\r\n    //     bSum += bTrimmed[i];\r\n    // }\r\n\r\n    // const rAvg = rSum / rTrimmed.length;\r\n    // const gAvg = gSum / gTrimmed.length;\r\n    // const bAvg = bSum / bTrimmed.length;\r\n\r\n    // return [Math.floor(rAvg), Math.floor(gAvg), Math.floor(bAvg)];\r\n\r\n    // - - - - -\r\n    // - - - - -\r\n    // - - - - -\r\n\r\n    const avgDistances = new Array(len);\r\n\r\n    for (let i = 0; i < len; i++) {\r\n        const i3 = i * 3;\r\n        const r = pixels[i3];\r\n        const g = pixels[i3 + 1];\r\n        const b = pixels[i3 + 2];\r\n\r\n        let sum = 0;\r\n        for (let j = 0; j < len; j += 8) {\r\n            if (i === j) {\r\n                continue;\r\n            }\r\n\r\n            const j3 = j * 3;\r\n            const r2 = pixels[j3];\r\n            const g2 = pixels[j3 + 1];\r\n            const b2 = pixels[j3 + 2];\r\n\r\n            sum += distance(r - r2, g - g2, b - b2);\r\n        }\r\n\r\n        avgDistances[i] = sum / (len - 1);\r\n    }\r\n\r\n    const sortedAvgDistances = avgDistances.slice().sort((a, b) => a - b);\r\n    const lowerQuartile = getLowerQuartile(sortedAvgDistances);\r\n    const upperQuartile = getUpperQuartile(sortedAvgDistances);\r\n\r\n    let rSum = 0;\r\n    let gSum = 0;\r\n    let bSum = 0;\r\n    let numNonOutliers = 0;\r\n    for (let i = 0; i < len; i++) {\r\n        const avgDistance = avgDistances[i];\r\n        if (avgDistance < lowerQuartile || avgDistance > upperQuartile) {\r\n            continue;\r\n        }\r\n        numNonOutliers++;\r\n\r\n        const i3 = i * 3;\r\n        const r = pixels[i3];\r\n        const g = pixels[i3 + 1];\r\n        const b = pixels[i3 + 2];\r\n\r\n        if (isNaN(r) || isNaN(g) || isNaN(b)) {\r\n            continue;\r\n        }\r\n\r\n        rSum += r;\r\n        gSum += g;\r\n        bSum += b;\r\n    }\r\n\r\n    let rAvg = rSum / numNonOutliers;\r\n    let gAvg = gSum / numNonOutliers;\r\n    let bAvg = bSum / numNonOutliers;\r\n\r\n    return [Math.floor(rAvg), Math.floor(gAvg), Math.floor(bAvg)];\r\n}\r\n\r\nfunction distance(r: number, g: number, b: number) {\r\n    return r * r + g * g + b * b;\r\n}\r\n\r\nfunction getLowerQuartile(arr: number[]) {\r\n    return arr[Math.floor(arr.length * 2 / 5)];\r\n}\r\n\r\nfunction getUpperQuartile(arr: number[]) {\r\n    return arr[Math.floor(arr.length * 3 / 5)]\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
